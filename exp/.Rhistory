#Store Results
LS.M <- mle$d
LS.B <- bhat$theta[1:ncol(XF)]
Nug.B <- bhat$theta[ncol(XF)+1]
deleteGPsep(yMhat)
deleteGPsep(bhat$gp)
return(list(uhat=uhat, tau2M=tau2M, LS.M = LS.M, tau2B=tau2B, LS.B = LS.B, Nug.B = Nug.B))
}
normalize.y <- function(yF = NULL, yM = NULL){
#r <- range(c(yF,yM))
#yF.n <- (yF - r[1])/(r[2]-r[1])
#yM.n <- (yM - r[1])/(r[2]-r[1])
v <- sd(c(yF,yM))
m <- mean(c(yF,yM))
yF.n <- (yF-m)/v
yM.n <- (yM - m)/v
return(list(yF.n = yF.n, yM.n = yM.n))
}
##################################################################################
#### MC Experiment  ###################
######################################################################################
## Performance Functions
rmse.score.fn <- function(Xm = NULL, yM = NULL, Xf = NULL, yF = NULL, uhat = NULL, Vm = NULL, Vb = NULL, theta_m = NULL,
theta_b = NULL, gb = NULL, Xf.test = NULL, yF.true.test = NULL, yF.noise.test = NULL, eps = NULL, normalize = FALSE){
Xfm <- rbind(cbind(Xf, rep(1, times = nrow(Xf)) %x% uhat), Xm)
#K <- Vm*covar.sep(Xfm, d= theta_m, g=  eps)
#K[1:nrow(Xf), 1:nrow(Xf)] <- K[1:nrow(Xf), 1:nrow(Xf)] + Vb*covar.sep(Xf, d = theta_b, g = gb)
K <- Vm*covar.sep(Xfm, d= theta_m, g=  eps)
K[1:nrow(Xf), 1:nrow(Xf)] <- K[1:nrow(Xf), 1:nrow(Xf)] + Vb*covar.sep(Xf, d = theta_b, g = gb)
Ki <- chol2inv(chol(K + diag(nrow(K))*eps))
Xf.test.uhat <- cbind(Xf.test, rep(1, times= nrow(Xf.test)) %x% t(uhat))
#km <- Vm*covar.sep( Xfm, Xf.test.uhat, d = theta_m, g = 0)
#kb <- Vb*covar.sep(Xf, Xf.test, d= theta_b, g = 0)
km <- Vm*covar.sep( Xfm, Xf.test.uhat, d = theta_m, g = 0)
kb <- (Vb)*covar.sep(Xf, Xf.test, d= theta_b, g = 0)
kmb <- km
kmb[1:nrow(Xf),] <- kmb[1:nrow(Xf),] + kb
K.pred <- Vm*covar.sep(Xf.test.uhat, d= theta_m, g = eps) + Vb* covar.sep(Xf.test, d = theta_b, g = gb)
if(normalize){
v <- sd(c(yF,yM))
m <- mean(c(yF,yM))
yF.n <- (yF-m)/v
yM.n <- (yM-m)/v
yF.true.test.n <- (yF.true.test-m)/v
yF.noise.test.n <- (yF.noise.test-m)/v
}else{
m <- 0
v <- 1
yF.n <- yF
yM.n <- yM
yF.true.test.n <- yF.true.test
yF.noise.test.n <- yF.noise.test
}
### Predictive Mean
tkmbKi <- crossprod(kmb, Ki)
mu.pred <-  tkmbKi %*% c(yF.n, yM.n)
Sig.pred <- (K.pred + diag(nrow(K.pred))*eps - t(kmb) %*% Ki %*% kmb)
#Pit <- t(solve(chol(K)))
#Pitk <- Pit %*% kmb
#kKik <- t(Pitk) %*% Pitk
#Sig.pred <- K.pred  - kKik
Sig.predi <- chol2inv(chol(Sig.pred))
### RMSE
rmse <- sqrt(mean((v^2)*(yF.true.test.n -mu.pred)^2))
score1 <- -as.numeric(determinant(Sig.pred, logarithm = TRUE)$modulus)
score2 <- -crossprod(yF.noise.test.n - mu.pred, Sig.predi) %*% (yF.noise.test.n - mu.pred)
score <- score1 + score2
score <- -as.numeric(determinant(Sig.pred, logarithm = TRUE)$modulus) -crossprod(yF.noise.test.n - mu.pred, Sig.predi) %*% (yF.noise.test.n - mu.pred)
# return(list(rmse = rmse, score = score))
return(list(rmse = rmse, score = score, score1 = score1, score2 = score2))
}
# Parameters
library(laGP)
library(plgp)
library(lhs)
library(hetGP)
eps <- sqrt(.Machine$double.eps)*10
lowest <<- 0
mc.iters <- 100
min.pts <- 5
max.pts <- 50
tests <- c(5,10,15,20,30, 40, 50)
rndm.strts <- 60
param.rec <- matrix(NA, ncol=  mc.iters, nrow = max.pts)
performance.list <- list()
list.temp <- list()
list.temp$score <- param.rec
list.temp$rmse <- param.rec
list.temp$uhat <- param.rec
list.temp$score1 <- param.rec
list.temp$score2 <- param.rec
for(i in min.pts:max.pts){
performance.list[[i]] <- list.temp
}
## For each iteration of the monte carlo experiment
for(i in 1:mc.iters){
print(paste("\n mc iter\n", i, collapse = ""))
## Training Data
model.pts <- min.pts
unique.field <- 7
field.reps <- 2
Xm <- randomLHS(n=model.pts, k=2)
#Computer Model Evaluations
yM <- Comp_Model(Xm[,1],Xm[,2])
#Field Data
#Xf <- randomLHS(n=10, k=1)
#Xf <- rbind(Xf,Xf)
bound.shift <- runif(2)
Xf <- runif(unique.field, min = 0, max =min(bound.shift))
Xf <- c(Xf, runif(unique.field, min = max(bound.shift), max = 1))
#Xf <- c(0,1,Xf)
Xf <- rep(Xf, times = field.reps)
Xf <- matrix(Xf, ncol = 1, nrow = length(Xf))
#Field Observations
yF <- drop(Field(Xf))
## Testing Data
Xf.test <- randomLHS(n = 100, k = 1)
yF.true.test <-  drop(Field(Xf.test,std.dev = 0))
yF.noise.test <- drop(Field(Xf.test))
initial.vals <- list(Xm = Xm, yM = yM, Xf = Xf, yF = yF)
rndm.tests <- matrix(runif(2*max.pts), ncol = 2, nrow = max.pts)
## Iterate over scenarios
#for(s in min.pts:max.pts){
for(s in tests){
print(paste("s = ", s, collapse = ""))
Xm <- initial.vals$Xm
yM <- initial.vals$yM
Xf <- initial.vals$Xf
yF <- initial.vals$yF
# tmp.nrm <- normalize.y(yF = yF, yM = yM)
#
# yF.n <- tmp.nrm$yF.n
# yM.n <- tmp.nrm$yM.n
yF.n <- yF
yM.n <- yM
fits <- GP_Fits(XU = Xm, yM = yM.n, XF = Xf, yF = yF.n, eps = eps)
fits.save <- list()
addtl.pts <- max.pts-min.pts
fits.save[[min.pts]] <- fits
fits.save[[min.pts]]$Xm <- Xm
fits.save[[min.pts]]$yM <- yM
Vb <- fits$tau2B
Vm <- fits$tau2M
theta_m <- fits$LS.M
theta_b <- fits$LS.B
gb <- fits$Nug.B
uhat <- fits$uhat
current.perf <- rmse.score.fn(Xm = Xm, yM = yM, Xf = Xf, yF = yF, uhat = uhat, Vm = Vm, Vb = Vb, theta_m = theta_m,
theta_b = theta_b, gb = gb, Xf.test = Xf.test, yF.true.test = yF.true.test, yF.noise.test = yF.noise.test,
eps = eps)
performance.list[[s]]$score[min.pts,i] <- current.perf$score
performance.list[[s]]$rmse[min.pts,i] <- current.perf$rmse
performance.list[[s]]$uhat[min.pts,i] <- uhat
performance.list[[s]]$score1[min.pts,i] <- current.perf$score1
performance.list[[s]]$score2[min.pts,i] <- current.perf$score2
type <- "Gaussian"
## Iterate over added points
for(j in (min.pts +1):max.pts){
if((j) <= s){
xtilde <- rndm.tests[j,]
print("adding random point")
}else{
xtilde <- IMSPE.optim(Xm = Xm, Xf = Xf, uhat = uhat, Vb = Vb, Vm = Vm,
theta_m = theta_m, theta_b = theta_b,gb = gb,
type = "Gaussian", p = 1, starts = rndm.strts, eps = eps)
print("adding IMSPE point")
}
Xm <- rbind(Xm,xtilde)
yM <- Comp_Model(Xm[,1],Xm[,2])
yM.n <- yM
# tmp.nrm <- normalize.y(yF = yF, yM = yM)
#
# yF.n <- tmp.nrm$yF.n
# yM.n <- tmp.nrm$yM.n
fits <- GP_Fits(XU = Xm, yM = yM.n, XF = Xf, yF = yF.n, eps = eps)
fits.save[[j]] <- fits
fits.save[[j]]$Xm <- Xm
fits.save[[j]]$yM <- yM
Vb <- fits$tau2B
Vm <- fits$tau2M
theta_m <- fits$LS.M
theta_b <- fits$LS.B
gb <- fits$Nug.B
uhat <- fits$uhat
current.perf <- rmse.score.fn(Xm = Xm, yM = yM, Xf = Xf, yF = yF, uhat = uhat, Vm = Vm, Vb = Vb, theta_m = theta_m,
theta_b = theta_b, gb = gb, Xf.test = Xf.test, yF.true.test = yF.true.test, yF.noise.test = yF.noise.test,
eps = eps)
performance.list[[s]]$score[j,i] <- current.perf$score
performance.list[[s]]$rmse[j,i] <- current.perf$rmse
performance.list[[s]]$uhat[j,i] <- uhat
performance.list[[s]]$score1[j,i] <- current.perf$score1
performance.list[[s]]$score2[j,i] <- current.perf$score2
}
}
}
#
#
## Plots for inspection
### All iterations
# s <- 20
#
# matplot(1:max.pts, performance.list[[s]]$uhat, type = "l", ylim = c(0.5,0.8))
# lines(1:max.pts, rep(pi/5, times =length(1:max.pts)))
#
# matplot(1:max.pts, performance.list[[s]]$score, type = "l")
#
# matplot(1:max.pts, performance.list[[s]]$rmse, type = "l")
#
# col.bank <- hcl.colors(n = length(tests)*5, palette = "Zissou 1")
# param <- "score"
#
#
# col.use <- col.bank[1]
# mean.vals <- data.frame(matrix(NA, ncol = length(tests), nrow = max.pts))
# names(mean.vals) <- tests
#
# for(i in tests){
# temp.mean <- apply(performance.list[[i]][[param]],1,function(X){mean(X)})
# if(param == "uhat"){
#   temp.mean <- apply(performance.list[[i]][[param]],1,function(X){mean(abs(X-pi/5))})
# }
# mean.vals[[as.character(i)]] <- temp.mean
# }
#
# y.lim <- range(mean.vals, na.rm = TRUE)
#
# # if(param == "uhat"){
# #   y.lim <- range(c(y.lim, pi/5))
# # }
#
# plot(1:max.pts, mean.vals[,1], type = "l", col = col.use, ylim = y.lim, main= param)
#
# for(i in 2:length(tests)){
#   col.use <- col.bank[5*i]
#   lines(1:max.pts, mean.vals[,i], col = col.use)
# }
#
# if(param == "uhat"){
#   lines(1:max.pts, rep(pi/5, times = length(1:max.pts)), col=  "black")
# }
# ## Average values over iterations
#
#
#
#
# ## boxplots
#
# tests.choose <- tests #c(5,15,30)
# ## Make a sequential vector below to marginalize over a subset of steps
#
# point.choose <- 12
# param <- "rmse"
#
# box.df <- data.frame(matrix(NA, ncol = length(tests.choose), nrow =mc.iters*length(point.choose)))
# names(box.df) <- tests.choose
#
# for(i in tests.choose){
#
#   box.df[[as.character(i)]] <- as.vector(performance.list[[i]][[param]][point.choose,])
#
#   if(param == "uhat"){
#     box.df[[as.character(i)]] <- abs(box.df[[as.character(i)]] - pi/5)
#   }
#   if(param == "rmse"){
#    #box.df[[as.character(i)]] <- log(box.df[[as.character(i)]])
#   }
# }
#
#
# boxplot(box.df, main = param)# uhat
#
#
#
# if(param == "uhat"){
#   abline(h = pi/5)
# }
# #############  Save Output From MC Experiment  ###################
## Test ideas
### High noise, lower number of unique values, more reps
### High noise, 10 unique values, more reps
### record value of nugget and bias scale
### Dont use a LHS for initial field design
deleteGPsep(0)
deleteGPsep(1)
deleteGPsep(2)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("surrogates-8-2-calib.R")
setwd("./../")
source("code/koh-imspe.R")
library(laGP)
library(plgp)
library(lhs)
library(hetGP)
library(geometry)
eps <- sqrt(.Machine$double.eps)*10
lowest <<- 0
mc.iters <- 200
min.pts <- 500
max.pts <- 600
tests <- c(500, 600)
rndm.strts <- 100
field.sd <- 0.25
type <- "Gaussian"
param.rec <- matrix(NA, ncol=  mc.iters, nrow = max.pts)
performance.list <- list()
list.temp <- list()
list.temp$score <- param.rec
list.temp$rmse <- param.rec
list.temp$uhat <- param.rec
list.temp$score1 <- param.rec
list.temp$score2 <- param.rec
for(i in min.pts:max.pts){
performance.list[[i]] <- list.temp
}
## For each iteration of the monte carlo experiment
for(i in 1:mc.iters){
print(paste("mc iter", i, collapse = ""))
## Training Data
model.pts <- min.pts
unique.field <- 50
field.reps <- 2
Xm <- randomLHS(n=model.pts, k=4)
#Computer Model Evaluations
yM <- Comp_Model(Xm[,1],Xm[,2])
#Field Data
Xf <- randomLHS(n=unique.field, k=1)
Xf <- rbind(Xf,Xf)
#Field Observations
yF <- drop(Field(Xf, std.dev = field.sd))
## Testing Data
Xf.test <- randomLHS(n = 100, k = 2)
yF.true.test <-  drop(Field(Xf.test,std.dev = 0))
yF.noise.test <- drop(Field(Xf.test, std.dev = field.sd))
fits <- GP_Fits(XU = Xm, yM = yM, XF = Xf, yF = yF, eps = eps)
initial.vals <- list(Xm = Xm, yM = yM, Xf = Xf, yF = yF,
Vb = fits$tau2B, Vm = fits$tau2M, theta_m = fits$LS.M, theta_b = fits$LS.B, gb = fits$Nug.B, uhat = fits$uhat)
rndm.tests <- matrix(runif(2*max.pts), ncol = ncol(Xm), nrow = max.pts)
## Iterate over scenarios
for(s in tests){
print(paste("s = ", s, collapse = ""))
Xm <- initial.vals$Xm
yM <- initial.vals$yM
#Computer Model Evaluations
Xf <- initial.vals$Xf
yF <- initial.vals$yF
Vb <- initial.vals$tau2B
Vm <- initial.vals$tau2M
theta_m <- initial.vals$LS.M
theta_b <- initial.vals$LS.B
gb <- initial.vals$Nug.B
uhat <- initial.vals$uhat
current.perf <- rmse.score.fn(Xm = Xm, yM = yM, Xf = Xf, yF = yF, uhat = uhat, Vm = Vm, Vb = Vb, theta_m = theta_m,
theta_b = theta_b, gb = gb, Xf.test = Xf.test, yF.true.test = yF.true.test, yF.noise.test = yF.noise.test,
eps = eps)
performance.list[[s]]$score[min.pts,i] <- current.perf$score
performance.list[[s]]$rmse[min.pts,i] <- current.perf$rmse
performance.list[[s]]$uhat[min.pts,i] <- uhat
performance.list[[s]]$score1[min.pts,i] <- current.perf$score1
performance.list[[s]]$score2[min.pts,i] <- current.perf$score2
## Iterate over added points
for(j in (min.pts+1):max.pts){
if((j) <= s){
xtilde <- rndm.tests[j,]
print("adding random point")
}else{
xtilde <- IMSPE.optim(Xm = Xm, Xf = Xf, uhat = uhat, Vb = Vb, Vm = Vm,
theta_m = theta_m, theta_b = theta_b,gb = gb,
type = "Gaussian", p = 1, starts = rndm.strts, eps = eps)
print("adding IMSPE point")
}
Xm <- rbind(Xm,xtilde)
yM <- Comp_Model(Xm[,1],Xm[,2])
fits <- GP_Fits(XU = Xm, yM = yM, XF = Xf, yF = yF, eps = eps)
Vb <- fits$tau2B
Vm <- fits$tau2M
theta_m <- fits$LS.M
theta_b <- fits$LS.B
gb <- fits$Nug.B
uhat <- fits$uhat
current.perf <- rmse.score.fn(Xm = Xm, yM = yM, Xf = Xf, yF = yF, uhat = uhat, Vm = Vm, Vb = Vb, theta_m = theta_m,
theta_b = theta_b, gb = gb, Xf.test = Xf.test, yF.true.test = yF.true.test, yF.noise.test = yF.noise.test,
eps = eps)
performance.list[[s]]$score[j,i] <- current.perf$score
performance.list[[s]]$rmse[j,i] <- current.perf$rmse
performance.list[[s]]$uhat[j,i] <- uhat
performance.list[[s]]$score1[j,i] <- current.perf$score1
performance.list[[s]]$score2[j,i] <- current.perf$score2
}
}
mcparams <- list(starts = rndm.strts, min.pts = min.pts, max.pts = max.pts,tests = tests, field.std = field.sd, field.dat = Xf,
field.npoints = length(Xf), field.reps = 2, score.noise = TRUE, field.design.desc = "lhs",  timestamp = Sys.time(),
notes = "setting up 4d expample and git")
performance.list$mcparams <- mcparams
#
file.name <- "~/scott-docs/koh-imspe/MC-exp/data-files/testdata.RData"
#
save(performance.list, file = file.name)
}
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("surrogates-8-2-calib.R")
setwd("./../")
source("code/koh-imspe.R")
library(laGP)
library(plgp)
library(lhs)
library(hetGP)
library(geometry)
eps <- sqrt(.Machine$double.eps)*10
lowest <<- 0
mc.iters <- 2
min.pts <- 500
max.pts <- 600
tests <- c(500, 600)
rndm.strts <- 10
field.sd <- 0.25
type <- "Gaussian"
param.rec <- matrix(NA, ncol=  mc.iters, nrow = max.pts)
performance.list <- list()
list.temp <- list()
list.temp$score <- param.rec
list.temp$rmse <- param.rec
list.temp$uhat <- param.rec
list.temp$score1 <- param.rec
list.temp$score2 <- param.rec
for(i in min.pts:max.pts){
performance.list[[i]] <- list.temp
}
## For each iteration of the monte carlo experiment
for(i in 1:mc.iters){
print(paste("mc iter", i, collapse = ""))
## Training Data
model.pts <- min.pts
unique.field <- 50
field.reps <- 2
Xm <- randomLHS(n=model.pts, k=4)
#Computer Model Evaluations
yM <- Comp_Model(Xm[,1:2],Xm[,3:4])
#Field Data
Xf <- randomLHS(n=unique.field, k=2)
Xf <- rbind(Xf,Xf)
#Field Observations
yF <- drop(Field(Xf, sd = field.sd))
## Testing Data
Xf.test <- randomLHS(n = 100, k = 2)
yF.true.test <-  drop(Field(Xf.test,sd = 0))
yF.noise.test <- drop(Field(Xf.test, sd = field.sd))
fits <- GP_Fits(XU = Xm, yM = yM, XF = Xf, yF = yF, eps = eps)
initial.vals <- list(Xm = Xm, yM = yM, Xf = Xf, yF = yF,
Vb = fits$tau2B, Vm = fits$tau2M, theta_m = fits$LS.M, theta_b = fits$LS.B, gb = fits$Nug.B, uhat = fits$uhat)
rndm.tests <- matrix(runif(2*max.pts), ncol = ncol(Xm), nrow = max.pts)
## Iterate over scenarios
for(s in tests){
print(paste("s = ", s, collapse = ""))
Xm <- initial.vals$Xm
yM <- initial.vals$yM
#Computer Model Evaluations
Xf <- initial.vals$Xf
yF <- initial.vals$yF
Vb <- initial.vals$tau2B
Vm <- initial.vals$tau2M
theta_m <- initial.vals$LS.M
theta_b <- initial.vals$LS.B
gb <- initial.vals$Nug.B
uhat <- initial.vals$uhat
current.perf <- rmse.score.fn(Xm = Xm, yM = yM, Xf = Xf, yF = yF, uhat = uhat, Vm = Vm, Vb = Vb, theta_m = theta_m,
theta_b = theta_b, gb = gb, Xf.test = Xf.test, yF.true.test = yF.true.test, yF.noise.test = yF.noise.test,
eps = eps)
performance.list[[s]]$score[min.pts,i] <- current.perf$score
performance.list[[s]]$rmse[min.pts,i] <- current.perf$rmse
performance.list[[s]]$uhat[min.pts,i] <- uhat
performance.list[[s]]$score1[min.pts,i] <- current.perf$score1
performance.list[[s]]$score2[min.pts,i] <- current.perf$score2
## Iterate over added points
for(j in (min.pts+1):max.pts){
if((j) <= s){
xtilde <- rndm.tests[j,]
print("adding random point")
}else{
xtilde <- IMSPE.optim(Xm = Xm, Xf = Xf, uhat = uhat, Vb = Vb, Vm = Vm,
theta_m = theta_m, theta_b = theta_b,gb = gb,
type = "Gaussian", p = 1, starts = rndm.strts, eps = eps)
print("adding IMSPE point")
}
Xm <- rbind(Xm,xtilde)
yM <- c(yM, Comp_Model(Xm[j,1:2, drop = FALSE],Xm[j,3:4, drop = FALSE]))
fits <- GP_Fits(XU = Xm, yM = yM, XF = Xf, yF = yF, eps = eps)
Vb <- fits$tau2B
Vm <- fits$tau2M
theta_m <- fits$LS.M
theta_b <- fits$LS.B
gb <- fits$Nug.B
uhat <- fits$uhat
current.perf <- rmse.score.fn(Xm = Xm, yM = yM, Xf = Xf, yF = yF, uhat = uhat, Vm = Vm, Vb = Vb, theta_m = theta_m,
theta_b = theta_b, gb = gb, Xf.test = Xf.test, yF.true.test = yF.true.test, yF.noise.test = yF.noise.test,
eps = eps)
performance.list[[s]]$score[j,i] <- current.perf$score
performance.list[[s]]$rmse[j,i] <- current.perf$rmse
performance.list[[s]]$uhat[j,i] <- uhat
performance.list[[s]]$score1[j,i] <- current.perf$score1
performance.list[[s]]$score2[j,i] <- current.perf$score2
}
}
mcparams <- list(starts = rndm.strts, min.pts = min.pts, max.pts = max.pts,tests = tests, field.std = field.sd, field.dat = Xf,
field.npoints = length(Xf), field.reps = 2, score.noise = TRUE, field.design.desc = "lhs",  timestamp = Sys.time(),
notes = "setting up 4d expample and git")
performance.list$mcparams <- mcparams
#
file.name <- "~/scott-docs/koh-imspe/MC-exp/data-files/testdata.RData"
#
save(performance.list, file = file.name)
}
deleteGPseps()
